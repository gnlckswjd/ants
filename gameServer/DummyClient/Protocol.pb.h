// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_Attack;
struct C_AttackDefaultTypeInternal;
extern C_AttackDefaultTypeInternal _C_Attack_default_instance_;
class C_Attacked;
struct C_AttackedDefaultTypeInternal;
extern C_AttackedDefaultTypeInternal _C_Attacked_default_instance_;
class C_EnterRoom;
struct C_EnterRoomDefaultTypeInternal;
extern C_EnterRoomDefaultTypeInternal _C_EnterRoom_default_instance_;
class C_Move;
struct C_MoveDefaultTypeInternal;
extern C_MoveDefaultTypeInternal _C_Move_default_instance_;
class C_TEST;
struct C_TESTDefaultTypeInternal;
extern C_TESTDefaultTypeInternal _C_TEST_default_instance_;
class M_InitRoom;
struct M_InitRoomDefaultTypeInternal;
extern M_InitRoomDefaultTypeInternal _M_InitRoom_default_instance_;
class M_TEST;
struct M_TESTDefaultTypeInternal;
extern M_TESTDefaultTypeInternal _M_TEST_default_instance_;
class MoveInfo;
struct MoveInfoDefaultTypeInternal;
extern MoveInfoDefaultTypeInternal _MoveInfo_default_instance_;
class S_Attack;
struct S_AttackDefaultTypeInternal;
extern S_AttackDefaultTypeInternal _S_Attack_default_instance_;
class S_Move;
struct S_MoveDefaultTypeInternal;
extern S_MoveDefaultTypeInternal _S_Move_default_instance_;
class S_RoomCompleted;
struct S_RoomCompletedDefaultTypeInternal;
extern S_RoomCompletedDefaultTypeInternal _S_RoomCompleted_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_Attack* Arena::CreateMaybeMessage<::Protocol::C_Attack>(Arena*);
template<> ::Protocol::C_Attacked* Arena::CreateMaybeMessage<::Protocol::C_Attacked>(Arena*);
template<> ::Protocol::C_EnterRoom* Arena::CreateMaybeMessage<::Protocol::C_EnterRoom>(Arena*);
template<> ::Protocol::C_Move* Arena::CreateMaybeMessage<::Protocol::C_Move>(Arena*);
template<> ::Protocol::C_TEST* Arena::CreateMaybeMessage<::Protocol::C_TEST>(Arena*);
template<> ::Protocol::M_InitRoom* Arena::CreateMaybeMessage<::Protocol::M_InitRoom>(Arena*);
template<> ::Protocol::M_TEST* Arena::CreateMaybeMessage<::Protocol::M_TEST>(Arena*);
template<> ::Protocol::MoveInfo* Arena::CreateMaybeMessage<::Protocol::MoveInfo>(Arena*);
template<> ::Protocol::S_Attack* Arena::CreateMaybeMessage<::Protocol::S_Attack>(Arena*);
template<> ::Protocol::S_Move* Arena::CreateMaybeMessage<::Protocol::S_Move>(Arena*);
template<> ::Protocol::S_RoomCompleted* Arena::CreateMaybeMessage<::Protocol::S_RoomCompleted>(Arena*);
template<> ::Protocol::UserInfo* Arena::CreateMaybeMessage<::Protocol::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum UserState : int {
  IDLE = 0,
  MOVE = 1,
  Attack = 2,
  DEAD = 3,
  UserState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UserState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UserState_IsValid(int value);
constexpr UserState UserState_MIN = IDLE;
constexpr UserState UserState_MAX = DEAD;
constexpr int UserState_ARRAYSIZE = UserState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserState_descriptor();
template<typename T>
inline const std::string& UserState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserState_descriptor(), enum_t_value);
}
inline bool UserState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserState>(
    UserState_descriptor(), name, value);
}
enum Direction : int {
  UP = 0,
  DOWN = 1,
  LEFT = 2,
  RIGHT = 3,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Direction_IsValid(int value);
constexpr Direction Direction_MIN = UP;
constexpr Direction Direction_MAX = RIGHT;
constexpr int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor();
template<typename T>
inline const std::string& Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Direction_descriptor(), enum_t_value);
}
inline bool Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
// ===================================================================

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMoveInfoFieldNumber = 3,
    kUserIDFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Protocol.MoveInfo moveInfo = 3;
  bool has_moveinfo() const;
  private:
  bool _internal_has_moveinfo() const;
  public:
  void clear_moveinfo();
  const ::Protocol::MoveInfo& moveinfo() const;
  PROTOBUF_NODISCARD ::Protocol::MoveInfo* release_moveinfo();
  ::Protocol::MoveInfo* mutable_moveinfo();
  void set_allocated_moveinfo(::Protocol::MoveInfo* moveinfo);
  private:
  const ::Protocol::MoveInfo& _internal_moveinfo() const;
  ::Protocol::MoveInfo* _internal_mutable_moveinfo();
  public:
  void unsafe_arena_set_allocated_moveinfo(
      ::Protocol::MoveInfo* moveinfo);
  ::Protocol::MoveInfo* unsafe_arena_release_moveinfo();

  // uint32 userID = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Protocol::MoveInfo* moveinfo_;
    uint32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class MoveInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MoveInfo) */ {
 public:
  inline MoveInfo() : MoveInfo(nullptr) {}
  ~MoveInfo() override;
  explicit PROTOBUF_CONSTEXPR MoveInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveInfo(const MoveInfo& from);
  MoveInfo(MoveInfo&& from) noexcept
    : MoveInfo() {
    *this = ::std::move(from);
  }

  inline MoveInfo& operator=(const MoveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveInfo& operator=(MoveInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveInfo* internal_default_instance() {
    return reinterpret_cast<const MoveInfo*>(
               &_MoveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MoveInfo& a, MoveInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveInfo& from) {
    MoveInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MoveInfo";
  }
  protected:
  explicit MoveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kPositionXFieldNumber = 3,
    kPositionYFieldNumber = 4,
  };
  // .Protocol.UserState state = 1;
  void clear_state();
  ::Protocol::UserState state() const;
  void set_state(::Protocol::UserState value);
  private:
  ::Protocol::UserState _internal_state() const;
  void _internal_set_state(::Protocol::UserState value);
  public:

  // .Protocol.Direction direction = 2;
  void clear_direction();
  ::Protocol::Direction direction() const;
  void set_direction(::Protocol::Direction value);
  private:
  ::Protocol::Direction _internal_direction() const;
  void _internal_set_direction(::Protocol::Direction value);
  public:

  // int32 positionX = 3;
  void clear_positionx();
  int32_t positionx() const;
  void set_positionx(int32_t value);
  private:
  int32_t _internal_positionx() const;
  void _internal_set_positionx(int32_t value);
  public:

  // int32 positionY = 4;
  void clear_positiony();
  int32_t positiony() const;
  void set_positiony(int32_t value);
  private:
  int32_t _internal_positiony() const;
  void _internal_set_positiony(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MoveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int state_;
    int direction_;
    int32_t positionx_;
    int32_t positiony_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class M_TEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.M_TEST) */ {
 public:
  inline M_TEST() : M_TEST(nullptr) {}
  ~M_TEST() override;
  explicit PROTOBUF_CONSTEXPR M_TEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  M_TEST(const M_TEST& from);
  M_TEST(M_TEST&& from) noexcept
    : M_TEST() {
    *this = ::std::move(from);
  }

  inline M_TEST& operator=(const M_TEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline M_TEST& operator=(M_TEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const M_TEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const M_TEST* internal_default_instance() {
    return reinterpret_cast<const M_TEST*>(
               &_M_TEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(M_TEST& a, M_TEST& b) {
    a.Swap(&b);
  }
  inline void Swap(M_TEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M_TEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  M_TEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<M_TEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const M_TEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const M_TEST& from) {
    M_TEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M_TEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.M_TEST";
  }
  protected:
  explicit M_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.M_TEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class M_InitRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.M_InitRoom) */ {
 public:
  inline M_InitRoom() : M_InitRoom(nullptr) {}
  ~M_InitRoom() override;
  explicit PROTOBUF_CONSTEXPR M_InitRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  M_InitRoom(const M_InitRoom& from);
  M_InitRoom(M_InitRoom&& from) noexcept
    : M_InitRoom() {
    *this = ::std::move(from);
  }

  inline M_InitRoom& operator=(const M_InitRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline M_InitRoom& operator=(M_InitRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const M_InitRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const M_InitRoom* internal_default_instance() {
    return reinterpret_cast<const M_InitRoom*>(
               &_M_InitRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(M_InitRoom& a, M_InitRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(M_InitRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M_InitRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  M_InitRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<M_InitRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const M_InitRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const M_InitRoom& from) {
    M_InitRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M_InitRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.M_InitRoom";
  }
  protected:
  explicit M_InitRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 2,
    kRoomIDFieldNumber = 1,
  };
  // repeated uint32 userID = 2;
  int userid_size() const;
  private:
  int _internal_userid_size() const;
  public:
  void clear_userid();
  private:
  uint32_t _internal_userid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_userid() const;
  void _internal_add_userid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_userid();
  public:
  uint32_t userid(int index) const;
  void set_userid(int index, uint32_t value);
  void add_userid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      userid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_userid();

  // uint32 roomID = 1;
  void clear_roomid();
  uint32_t roomid() const;
  void set_roomid(uint32_t value);
  private:
  uint32_t _internal_roomid() const;
  void _internal_set_roomid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.M_InitRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > userid_;
    mutable std::atomic<int> _userid_cached_byte_size_;
    uint32_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_RoomCompleted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_RoomCompleted) */ {
 public:
  inline S_RoomCompleted() : S_RoomCompleted(nullptr) {}
  ~S_RoomCompleted() override;
  explicit PROTOBUF_CONSTEXPR S_RoomCompleted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_RoomCompleted(const S_RoomCompleted& from);
  S_RoomCompleted(S_RoomCompleted&& from) noexcept
    : S_RoomCompleted() {
    *this = ::std::move(from);
  }

  inline S_RoomCompleted& operator=(const S_RoomCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_RoomCompleted& operator=(S_RoomCompleted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_RoomCompleted& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_RoomCompleted* internal_default_instance() {
    return reinterpret_cast<const S_RoomCompleted*>(
               &_S_RoomCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_RoomCompleted& a, S_RoomCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(S_RoomCompleted* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_RoomCompleted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_RoomCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_RoomCompleted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_RoomCompleted& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_RoomCompleted& from) {
    S_RoomCompleted::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_RoomCompleted* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_RoomCompleted";
  }
  protected:
  explicit S_RoomCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 1,
    kIsCompletedFieldNumber = 2,
  };
  // uint32 roomID = 1;
  void clear_roomid();
  uint32_t roomid() const;
  void set_roomid(uint32_t value);
  private:
  uint32_t _internal_roomid() const;
  void _internal_set_roomid(uint32_t value);
  public:

  // bool isCompleted = 2;
  void clear_iscompleted();
  bool iscompleted() const;
  void set_iscompleted(bool value);
  private:
  bool _internal_iscompleted() const;
  void _internal_set_iscompleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_RoomCompleted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t roomid_;
    bool iscompleted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_TEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_TEST) */ {
 public:
  inline C_TEST() : C_TEST(nullptr) {}
  ~C_TEST() override;
  explicit PROTOBUF_CONSTEXPR C_TEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_TEST(const C_TEST& from);
  C_TEST(C_TEST&& from) noexcept
    : C_TEST() {
    *this = ::std::move(from);
  }

  inline C_TEST& operator=(const C_TEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_TEST& operator=(C_TEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_TEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_TEST* internal_default_instance() {
    return reinterpret_cast<const C_TEST*>(
               &_C_TEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_TEST& a, C_TEST& b) {
    a.Swap(&b);
  }
  inline void Swap(C_TEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_TEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_TEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_TEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_TEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_TEST& from) {
    C_TEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_TEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_TEST";
  }
  protected:
  explicit C_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_TEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_EnterRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_EnterRoom) */ {
 public:
  inline C_EnterRoom() : C_EnterRoom(nullptr) {}
  ~C_EnterRoom() override;
  explicit PROTOBUF_CONSTEXPR C_EnterRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_EnterRoom(const C_EnterRoom& from);
  C_EnterRoom(C_EnterRoom&& from) noexcept
    : C_EnterRoom() {
    *this = ::std::move(from);
  }

  inline C_EnterRoom& operator=(const C_EnterRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_EnterRoom& operator=(C_EnterRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_EnterRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_EnterRoom* internal_default_instance() {
    return reinterpret_cast<const C_EnterRoom*>(
               &_C_EnterRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_EnterRoom& a, C_EnterRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(C_EnterRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_EnterRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_EnterRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_EnterRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_EnterRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_EnterRoom& from) {
    C_EnterRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_EnterRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_EnterRoom";
  }
  protected:
  explicit C_EnterRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kUserIDFieldNumber = 1,
    kRoomIDFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 userID = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // uint32 roomID = 2;
  void clear_roomid();
  uint32_t roomid() const;
  void set_roomid(uint32_t value);
  private:
  uint32_t _internal_roomid() const;
  void _internal_set_roomid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_EnterRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t userid_;
    uint32_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Move) */ {
 public:
  inline C_Move() : C_Move(nullptr) {}
  ~C_Move() override;
  explicit PROTOBUF_CONSTEXPR C_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Move(const C_Move& from);
  C_Move(C_Move&& from) noexcept
    : C_Move() {
    *this = ::std::move(from);
  }

  inline C_Move& operator=(const C_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Move& operator=(C_Move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Move* internal_default_instance() {
    return reinterpret_cast<const C_Move*>(
               &_C_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_Move& a, C_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Move* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Move& from) {
    C_Move::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Move* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Move";
  }
  protected:
  explicit C_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveInfoFieldNumber = 1,
  };
  // .Protocol.MoveInfo moveInfo = 1;
  bool has_moveinfo() const;
  private:
  bool _internal_has_moveinfo() const;
  public:
  void clear_moveinfo();
  const ::Protocol::MoveInfo& moveinfo() const;
  PROTOBUF_NODISCARD ::Protocol::MoveInfo* release_moveinfo();
  ::Protocol::MoveInfo* mutable_moveinfo();
  void set_allocated_moveinfo(::Protocol::MoveInfo* moveinfo);
  private:
  const ::Protocol::MoveInfo& _internal_moveinfo() const;
  ::Protocol::MoveInfo* _internal_mutable_moveinfo();
  public:
  void unsafe_arena_set_allocated_moveinfo(
      ::Protocol::MoveInfo* moveinfo);
  ::Protocol::MoveInfo* unsafe_arena_release_moveinfo();

  // @@protoc_insertion_point(class_scope:Protocol.C_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::MoveInfo* moveinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Move) */ {
 public:
  inline S_Move() : S_Move(nullptr) {}
  ~S_Move() override;
  explicit PROTOBUF_CONSTEXPR S_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Move(const S_Move& from);
  S_Move(S_Move&& from) noexcept
    : S_Move() {
    *this = ::std::move(from);
  }

  inline S_Move& operator=(const S_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Move& operator=(S_Move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Move* internal_default_instance() {
    return reinterpret_cast<const S_Move*>(
               &_S_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_Move& a, S_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Move* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Move& from) {
    S_Move::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Move* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Move";
  }
  protected:
  explicit S_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveInfoFieldNumber = 2,
    kUserIDFieldNumber = 1,
  };
  // .Protocol.MoveInfo moveInfo = 2;
  bool has_moveinfo() const;
  private:
  bool _internal_has_moveinfo() const;
  public:
  void clear_moveinfo();
  const ::Protocol::MoveInfo& moveinfo() const;
  PROTOBUF_NODISCARD ::Protocol::MoveInfo* release_moveinfo();
  ::Protocol::MoveInfo* mutable_moveinfo();
  void set_allocated_moveinfo(::Protocol::MoveInfo* moveinfo);
  private:
  const ::Protocol::MoveInfo& _internal_moveinfo() const;
  ::Protocol::MoveInfo* _internal_mutable_moveinfo();
  public:
  void unsafe_arena_set_allocated_moveinfo(
      ::Protocol::MoveInfo* moveinfo);
  ::Protocol::MoveInfo* unsafe_arena_release_moveinfo();

  // uint32 userID = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::MoveInfo* moveinfo_;
    uint32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Attack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Attack) */ {
 public:
  inline C_Attack() : C_Attack(nullptr) {}
  ~C_Attack() override;
  explicit PROTOBUF_CONSTEXPR C_Attack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Attack(const C_Attack& from);
  C_Attack(C_Attack&& from) noexcept
    : C_Attack() {
    *this = ::std::move(from);
  }

  inline C_Attack& operator=(const C_Attack& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Attack& operator=(C_Attack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Attack& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Attack* internal_default_instance() {
    return reinterpret_cast<const C_Attack*>(
               &_C_Attack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_Attack& a, C_Attack& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Attack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Attack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Attack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Attack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Attack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Attack& from) {
    C_Attack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Attack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Attack";
  }
  protected:
  explicit C_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionXFieldNumber = 1,
    kDirectionYFieldNumber = 2,
  };
  // float directionX = 1;
  void clear_directionx();
  float directionx() const;
  void set_directionx(float value);
  private:
  float _internal_directionx() const;
  void _internal_set_directionx(float value);
  public:

  // float directionY = 2;
  void clear_directiony();
  float directiony() const;
  void set_directiony(float value);
  private:
  float _internal_directiony() const;
  void _internal_set_directiony(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Attack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float directionx_;
    float directiony_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Attack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Attack) */ {
 public:
  inline S_Attack() : S_Attack(nullptr) {}
  ~S_Attack() override;
  explicit PROTOBUF_CONSTEXPR S_Attack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Attack(const S_Attack& from);
  S_Attack(S_Attack&& from) noexcept
    : S_Attack() {
    *this = ::std::move(from);
  }

  inline S_Attack& operator=(const S_Attack& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Attack& operator=(S_Attack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Attack& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Attack* internal_default_instance() {
    return reinterpret_cast<const S_Attack*>(
               &_S_Attack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_Attack& a, S_Attack& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Attack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Attack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Attack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Attack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Attack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Attack& from) {
    S_Attack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Attack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Attack";
  }
  protected:
  explicit S_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kDirectionXFieldNumber = 2,
    kDirectionYFieldNumber = 3,
  };
  // uint32 userID = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // float directionX = 2;
  void clear_directionx();
  float directionx() const;
  void set_directionx(float value);
  private:
  float _internal_directionx() const;
  void _internal_set_directionx(float value);
  public:

  // float directionY = 3;
  void clear_directiony();
  float directiony() const;
  void set_directiony(float value);
  private:
  float _internal_directiony() const;
  void _internal_set_directiony(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Attack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t userid_;
    float directionx_;
    float directiony_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Attacked final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Attacked) */ {
 public:
  inline C_Attacked() : C_Attacked(nullptr) {}
  ~C_Attacked() override;
  explicit PROTOBUF_CONSTEXPR C_Attacked(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Attacked(const C_Attacked& from);
  C_Attacked(C_Attacked&& from) noexcept
    : C_Attacked() {
    *this = ::std::move(from);
  }

  inline C_Attacked& operator=(const C_Attacked& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Attacked& operator=(C_Attacked&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Attacked& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Attacked* internal_default_instance() {
    return reinterpret_cast<const C_Attacked*>(
               &_C_Attacked_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C_Attacked& a, C_Attacked& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Attacked* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Attacked* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Attacked* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Attacked>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Attacked& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Attacked& from) {
    C_Attacked::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Attacked* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Attacked";
  }
  protected:
  explicit C_Attacked(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
  };
  // uint32 userID = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Attacked)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// uint32 userID = 1;
inline void UserInfo::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t UserInfo::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t UserInfo::userid() const {
  // @@protoc_insertion_point(field_get:Protocol.UserInfo.userID)
  return _internal_userid();
}
inline void UserInfo::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void UserInfo::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Protocol.UserInfo.userID)
}

// string name = 2;
inline void UserInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.UserInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.UserInfo.name)
  return _s;
}
inline const std::string& UserInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.UserInfo.name)
  return _impl_.name_.Release();
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserInfo.name)
}

// .Protocol.MoveInfo moveInfo = 3;
inline bool UserInfo::_internal_has_moveinfo() const {
  return this != internal_default_instance() && _impl_.moveinfo_ != nullptr;
}
inline bool UserInfo::has_moveinfo() const {
  return _internal_has_moveinfo();
}
inline void UserInfo::clear_moveinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.moveinfo_ != nullptr) {
    delete _impl_.moveinfo_;
  }
  _impl_.moveinfo_ = nullptr;
}
inline const ::Protocol::MoveInfo& UserInfo::_internal_moveinfo() const {
  const ::Protocol::MoveInfo* p = _impl_.moveinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::MoveInfo&>(
      ::Protocol::_MoveInfo_default_instance_);
}
inline const ::Protocol::MoveInfo& UserInfo::moveinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.UserInfo.moveInfo)
  return _internal_moveinfo();
}
inline void UserInfo::unsafe_arena_set_allocated_moveinfo(
    ::Protocol::MoveInfo* moveinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.moveinfo_);
  }
  _impl_.moveinfo_ = moveinfo;
  if (moveinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.UserInfo.moveInfo)
}
inline ::Protocol::MoveInfo* UserInfo::release_moveinfo() {
  
  ::Protocol::MoveInfo* temp = _impl_.moveinfo_;
  _impl_.moveinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::MoveInfo* UserInfo::unsafe_arena_release_moveinfo() {
  // @@protoc_insertion_point(field_release:Protocol.UserInfo.moveInfo)
  
  ::Protocol::MoveInfo* temp = _impl_.moveinfo_;
  _impl_.moveinfo_ = nullptr;
  return temp;
}
inline ::Protocol::MoveInfo* UserInfo::_internal_mutable_moveinfo() {
  
  if (_impl_.moveinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::MoveInfo>(GetArenaForAllocation());
    _impl_.moveinfo_ = p;
  }
  return _impl_.moveinfo_;
}
inline ::Protocol::MoveInfo* UserInfo::mutable_moveinfo() {
  ::Protocol::MoveInfo* _msg = _internal_mutable_moveinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.UserInfo.moveInfo)
  return _msg;
}
inline void UserInfo::set_allocated_moveinfo(::Protocol::MoveInfo* moveinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.moveinfo_;
  }
  if (moveinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(moveinfo);
    if (message_arena != submessage_arena) {
      moveinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moveinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.moveinfo_ = moveinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserInfo.moveInfo)
}

// -------------------------------------------------------------------

// MoveInfo

// .Protocol.UserState state = 1;
inline void MoveInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::UserState MoveInfo::_internal_state() const {
  return static_cast< ::Protocol::UserState >(_impl_.state_);
}
inline ::Protocol::UserState MoveInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveInfo.state)
  return _internal_state();
}
inline void MoveInfo::_internal_set_state(::Protocol::UserState value) {
  
  _impl_.state_ = value;
}
inline void MoveInfo::set_state(::Protocol::UserState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveInfo.state)
}

// .Protocol.Direction direction = 2;
inline void MoveInfo::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::Protocol::Direction MoveInfo::_internal_direction() const {
  return static_cast< ::Protocol::Direction >(_impl_.direction_);
}
inline ::Protocol::Direction MoveInfo::direction() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveInfo.direction)
  return _internal_direction();
}
inline void MoveInfo::_internal_set_direction(::Protocol::Direction value) {
  
  _impl_.direction_ = value;
}
inline void MoveInfo::set_direction(::Protocol::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveInfo.direction)
}

// int32 positionX = 3;
inline void MoveInfo::clear_positionx() {
  _impl_.positionx_ = 0;
}
inline int32_t MoveInfo::_internal_positionx() const {
  return _impl_.positionx_;
}
inline int32_t MoveInfo::positionx() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveInfo.positionX)
  return _internal_positionx();
}
inline void MoveInfo::_internal_set_positionx(int32_t value) {
  
  _impl_.positionx_ = value;
}
inline void MoveInfo::set_positionx(int32_t value) {
  _internal_set_positionx(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveInfo.positionX)
}

// int32 positionY = 4;
inline void MoveInfo::clear_positiony() {
  _impl_.positiony_ = 0;
}
inline int32_t MoveInfo::_internal_positiony() const {
  return _impl_.positiony_;
}
inline int32_t MoveInfo::positiony() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveInfo.positionY)
  return _internal_positiony();
}
inline void MoveInfo::_internal_set_positiony(int32_t value) {
  
  _impl_.positiony_ = value;
}
inline void MoveInfo::set_positiony(int32_t value) {
  _internal_set_positiony(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveInfo.positionY)
}

// -------------------------------------------------------------------

// M_TEST

// string msg = 1;
inline void M_TEST::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& M_TEST::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.M_TEST.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void M_TEST::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.M_TEST.msg)
}
inline std::string* M_TEST::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.M_TEST.msg)
  return _s;
}
inline const std::string& M_TEST::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void M_TEST::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* M_TEST::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* M_TEST::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.M_TEST.msg)
  return _impl_.msg_.Release();
}
inline void M_TEST::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.M_TEST.msg)
}

// -------------------------------------------------------------------

// M_InitRoom

// uint32 roomID = 1;
inline void M_InitRoom::clear_roomid() {
  _impl_.roomid_ = 0u;
}
inline uint32_t M_InitRoom::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint32_t M_InitRoom::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.M_InitRoom.roomID)
  return _internal_roomid();
}
inline void M_InitRoom::_internal_set_roomid(uint32_t value) {
  
  _impl_.roomid_ = value;
}
inline void M_InitRoom::set_roomid(uint32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.M_InitRoom.roomID)
}

// repeated uint32 userID = 2;
inline int M_InitRoom::_internal_userid_size() const {
  return _impl_.userid_.size();
}
inline int M_InitRoom::userid_size() const {
  return _internal_userid_size();
}
inline void M_InitRoom::clear_userid() {
  _impl_.userid_.Clear();
}
inline uint32_t M_InitRoom::_internal_userid(int index) const {
  return _impl_.userid_.Get(index);
}
inline uint32_t M_InitRoom::userid(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.M_InitRoom.userID)
  return _internal_userid(index);
}
inline void M_InitRoom::set_userid(int index, uint32_t value) {
  _impl_.userid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.M_InitRoom.userID)
}
inline void M_InitRoom::_internal_add_userid(uint32_t value) {
  _impl_.userid_.Add(value);
}
inline void M_InitRoom::add_userid(uint32_t value) {
  _internal_add_userid(value);
  // @@protoc_insertion_point(field_add:Protocol.M_InitRoom.userID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
M_InitRoom::_internal_userid() const {
  return _impl_.userid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
M_InitRoom::userid() const {
  // @@protoc_insertion_point(field_list:Protocol.M_InitRoom.userID)
  return _internal_userid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
M_InitRoom::_internal_mutable_userid() {
  return &_impl_.userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
M_InitRoom::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.M_InitRoom.userID)
  return _internal_mutable_userid();
}

// -------------------------------------------------------------------

// S_RoomCompleted

// uint32 roomID = 1;
inline void S_RoomCompleted::clear_roomid() {
  _impl_.roomid_ = 0u;
}
inline uint32_t S_RoomCompleted::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint32_t S_RoomCompleted::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RoomCompleted.roomID)
  return _internal_roomid();
}
inline void S_RoomCompleted::_internal_set_roomid(uint32_t value) {
  
  _impl_.roomid_ = value;
}
inline void S_RoomCompleted::set_roomid(uint32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_RoomCompleted.roomID)
}

// bool isCompleted = 2;
inline void S_RoomCompleted::clear_iscompleted() {
  _impl_.iscompleted_ = false;
}
inline bool S_RoomCompleted::_internal_iscompleted() const {
  return _impl_.iscompleted_;
}
inline bool S_RoomCompleted::iscompleted() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RoomCompleted.isCompleted)
  return _internal_iscompleted();
}
inline void S_RoomCompleted::_internal_set_iscompleted(bool value) {
  
  _impl_.iscompleted_ = value;
}
inline void S_RoomCompleted::set_iscompleted(bool value) {
  _internal_set_iscompleted(value);
  // @@protoc_insertion_point(field_set:Protocol.S_RoomCompleted.isCompleted)
}

// -------------------------------------------------------------------

// C_TEST

// string msg = 1;
inline void C_TEST::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& C_TEST::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_TEST.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_TEST::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_TEST.msg)
}
inline std::string* C_TEST::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.C_TEST.msg)
  return _s;
}
inline const std::string& C_TEST::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void C_TEST::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* C_TEST::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* C_TEST::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_TEST.msg)
  return _impl_.msg_.Release();
}
inline void C_TEST::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_TEST.msg)
}

// -------------------------------------------------------------------

// C_EnterRoom

// uint32 userID = 1;
inline void C_EnterRoom::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t C_EnterRoom::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t C_EnterRoom::userid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EnterRoom.userID)
  return _internal_userid();
}
inline void C_EnterRoom::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void C_EnterRoom::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_EnterRoom.userID)
}

// uint32 roomID = 2;
inline void C_EnterRoom::clear_roomid() {
  _impl_.roomid_ = 0u;
}
inline uint32_t C_EnterRoom::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint32_t C_EnterRoom::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EnterRoom.roomID)
  return _internal_roomid();
}
inline void C_EnterRoom::_internal_set_roomid(uint32_t value) {
  
  _impl_.roomid_ = value;
}
inline void C_EnterRoom::set_roomid(uint32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_EnterRoom.roomID)
}

// string name = 3;
inline void C_EnterRoom::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& C_EnterRoom::name() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EnterRoom.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_EnterRoom::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_EnterRoom.name)
}
inline std::string* C_EnterRoom::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C_EnterRoom.name)
  return _s;
}
inline const std::string& C_EnterRoom::_internal_name() const {
  return _impl_.name_.Get();
}
inline void C_EnterRoom::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_EnterRoom::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_EnterRoom::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.C_EnterRoom.name)
  return _impl_.name_.Release();
}
inline void C_EnterRoom::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_EnterRoom.name)
}

// -------------------------------------------------------------------

// C_Move

// .Protocol.MoveInfo moveInfo = 1;
inline bool C_Move::_internal_has_moveinfo() const {
  return this != internal_default_instance() && _impl_.moveinfo_ != nullptr;
}
inline bool C_Move::has_moveinfo() const {
  return _internal_has_moveinfo();
}
inline void C_Move::clear_moveinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.moveinfo_ != nullptr) {
    delete _impl_.moveinfo_;
  }
  _impl_.moveinfo_ = nullptr;
}
inline const ::Protocol::MoveInfo& C_Move::_internal_moveinfo() const {
  const ::Protocol::MoveInfo* p = _impl_.moveinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::MoveInfo&>(
      ::Protocol::_MoveInfo_default_instance_);
}
inline const ::Protocol::MoveInfo& C_Move::moveinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Move.moveInfo)
  return _internal_moveinfo();
}
inline void C_Move::unsafe_arena_set_allocated_moveinfo(
    ::Protocol::MoveInfo* moveinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.moveinfo_);
  }
  _impl_.moveinfo_ = moveinfo;
  if (moveinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_Move.moveInfo)
}
inline ::Protocol::MoveInfo* C_Move::release_moveinfo() {
  
  ::Protocol::MoveInfo* temp = _impl_.moveinfo_;
  _impl_.moveinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::MoveInfo* C_Move::unsafe_arena_release_moveinfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_Move.moveInfo)
  
  ::Protocol::MoveInfo* temp = _impl_.moveinfo_;
  _impl_.moveinfo_ = nullptr;
  return temp;
}
inline ::Protocol::MoveInfo* C_Move::_internal_mutable_moveinfo() {
  
  if (_impl_.moveinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::MoveInfo>(GetArenaForAllocation());
    _impl_.moveinfo_ = p;
  }
  return _impl_.moveinfo_;
}
inline ::Protocol::MoveInfo* C_Move::mutable_moveinfo() {
  ::Protocol::MoveInfo* _msg = _internal_mutable_moveinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Move.moveInfo)
  return _msg;
}
inline void C_Move::set_allocated_moveinfo(::Protocol::MoveInfo* moveinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.moveinfo_;
  }
  if (moveinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(moveinfo);
    if (message_arena != submessage_arena) {
      moveinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moveinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.moveinfo_ = moveinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Move.moveInfo)
}

// -------------------------------------------------------------------

// S_Move

// uint32 userID = 1;
inline void S_Move::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t S_Move::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t S_Move::userid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Move.userID)
  return _internal_userid();
}
inline void S_Move::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void S_Move::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Move.userID)
}

// .Protocol.MoveInfo moveInfo = 2;
inline bool S_Move::_internal_has_moveinfo() const {
  return this != internal_default_instance() && _impl_.moveinfo_ != nullptr;
}
inline bool S_Move::has_moveinfo() const {
  return _internal_has_moveinfo();
}
inline void S_Move::clear_moveinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.moveinfo_ != nullptr) {
    delete _impl_.moveinfo_;
  }
  _impl_.moveinfo_ = nullptr;
}
inline const ::Protocol::MoveInfo& S_Move::_internal_moveinfo() const {
  const ::Protocol::MoveInfo* p = _impl_.moveinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::MoveInfo&>(
      ::Protocol::_MoveInfo_default_instance_);
}
inline const ::Protocol::MoveInfo& S_Move::moveinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Move.moveInfo)
  return _internal_moveinfo();
}
inline void S_Move::unsafe_arena_set_allocated_moveinfo(
    ::Protocol::MoveInfo* moveinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.moveinfo_);
  }
  _impl_.moveinfo_ = moveinfo;
  if (moveinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_Move.moveInfo)
}
inline ::Protocol::MoveInfo* S_Move::release_moveinfo() {
  
  ::Protocol::MoveInfo* temp = _impl_.moveinfo_;
  _impl_.moveinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::MoveInfo* S_Move::unsafe_arena_release_moveinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_Move.moveInfo)
  
  ::Protocol::MoveInfo* temp = _impl_.moveinfo_;
  _impl_.moveinfo_ = nullptr;
  return temp;
}
inline ::Protocol::MoveInfo* S_Move::_internal_mutable_moveinfo() {
  
  if (_impl_.moveinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::MoveInfo>(GetArenaForAllocation());
    _impl_.moveinfo_ = p;
  }
  return _impl_.moveinfo_;
}
inline ::Protocol::MoveInfo* S_Move::mutable_moveinfo() {
  ::Protocol::MoveInfo* _msg = _internal_mutable_moveinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Move.moveInfo)
  return _msg;
}
inline void S_Move::set_allocated_moveinfo(::Protocol::MoveInfo* moveinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.moveinfo_;
  }
  if (moveinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(moveinfo);
    if (message_arena != submessage_arena) {
      moveinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moveinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.moveinfo_ = moveinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Move.moveInfo)
}

// -------------------------------------------------------------------

// C_Attack

// float directionX = 1;
inline void C_Attack::clear_directionx() {
  _impl_.directionx_ = 0;
}
inline float C_Attack::_internal_directionx() const {
  return _impl_.directionx_;
}
inline float C_Attack::directionx() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Attack.directionX)
  return _internal_directionx();
}
inline void C_Attack::_internal_set_directionx(float value) {
  
  _impl_.directionx_ = value;
}
inline void C_Attack::set_directionx(float value) {
  _internal_set_directionx(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Attack.directionX)
}

// float directionY = 2;
inline void C_Attack::clear_directiony() {
  _impl_.directiony_ = 0;
}
inline float C_Attack::_internal_directiony() const {
  return _impl_.directiony_;
}
inline float C_Attack::directiony() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Attack.directionY)
  return _internal_directiony();
}
inline void C_Attack::_internal_set_directiony(float value) {
  
  _impl_.directiony_ = value;
}
inline void C_Attack::set_directiony(float value) {
  _internal_set_directiony(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Attack.directionY)
}

// -------------------------------------------------------------------

// S_Attack

// uint32 userID = 1;
inline void S_Attack::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t S_Attack::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t S_Attack::userid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Attack.userID)
  return _internal_userid();
}
inline void S_Attack::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void S_Attack::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Attack.userID)
}

// float directionX = 2;
inline void S_Attack::clear_directionx() {
  _impl_.directionx_ = 0;
}
inline float S_Attack::_internal_directionx() const {
  return _impl_.directionx_;
}
inline float S_Attack::directionx() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Attack.directionX)
  return _internal_directionx();
}
inline void S_Attack::_internal_set_directionx(float value) {
  
  _impl_.directionx_ = value;
}
inline void S_Attack::set_directionx(float value) {
  _internal_set_directionx(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Attack.directionX)
}

// float directionY = 3;
inline void S_Attack::clear_directiony() {
  _impl_.directiony_ = 0;
}
inline float S_Attack::_internal_directiony() const {
  return _impl_.directiony_;
}
inline float S_Attack::directiony() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Attack.directionY)
  return _internal_directiony();
}
inline void S_Attack::_internal_set_directiony(float value) {
  
  _impl_.directiony_ = value;
}
inline void S_Attack::set_directiony(float value) {
  _internal_set_directiony(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Attack.directionY)
}

// -------------------------------------------------------------------

// C_Attacked

// uint32 userID = 1;
inline void C_Attacked::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t C_Attacked::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t C_Attacked::userid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Attacked.userID)
  return _internal_userid();
}
inline void C_Attacked::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void C_Attacked::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Attacked.userID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::UserState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::UserState>() {
  return ::Protocol::UserState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::Direction>() {
  return ::Protocol::Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
